{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/importlib/_bootstrap.py:205: RuntimeWarning: compiletime version 3.5 of module 'tensorflow.python.framework.fast_tensor_util' does not match runtime version 3.6\n",
      "  return f(*args, **kwds)\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "import os\n",
    "import glob\n",
    "import tensorflow as tf\n",
    "from im2txt import configuration\n",
    "from im2txt import inference_wrapper\n",
    "from im2txt.inference_utils import caption_generator\n",
    "from im2txt.inference_utils import vocabulary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Building model.\n",
      "INFO:tensorflow:Initializing vocabulary from file: ./word_counts.txt\n",
      "INFO:tensorflow:Created vocabulary with 11520 words\n"
     ]
    }
   ],
   "source": [
    "checkpointpath = './model.ckpt-2000000' \n",
    "vocabfile =  './word_counts.txt'\n",
    "\n",
    "g = tf.Graph()\n",
    "with g.as_default():\n",
    "    model = inference_wrapper.InferenceWrapper()\n",
    "    restore_fn = model.build_graph_from_config(configuration.ModelConfig(), checkpointpath)\n",
    "g.finalize()\n",
    "vocab = vocabulary.Vocabulary(vocabfile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def makecaptions(subdir, filenames):\n",
    "    with tf.Session(graph=g) as sess:\n",
    "        restore_fn(sess)\n",
    "        generator = caption_generator.CaptionGenerator(model, vocab)\n",
    "\n",
    "        counter = 0\n",
    "        captionfile = open('output/'+subdir,'a+')\n",
    "    \n",
    "        for filename in filenames:\n",
    "            try:\n",
    "                with tf.gfile.GFile(filename, \"rb\") as f:\n",
    "                    image = f.read()\n",
    "                captions = generator.beam_search(sess, image)\n",
    "        \n",
    "                #print(os.path.basename(filename))\n",
    "                captionfile.write(os.path.basename(filename))\n",
    "                captionfile.write('\\n')\n",
    "                for i, caption in enumerate(captions):\n",
    "                    sentence = [vocab.id_to_word(w) for w in caption.sentence[1:-1]]\n",
    "                    sentence = \" \".join(sentence)\n",
    "                    #print('{:.8f}'.format(math.exp(caption.logprob)), sentence)\n",
    "                    captionfile.write('{:.8f} '.format(math.exp(caption.logprob)))\n",
    "                    captionfile.write(sentence)\n",
    "                    captionfile.write('\\n')\n",
    "                captionfile.write('\\n')\n",
    "            except:\n",
    "                print(filename,'PASS')\n",
    "\n",
    "            counter += 1\n",
    "            if counter%50==0:\n",
    "                print(subdir, counter)\n",
    "                            \n",
    "    print('DONE')\n",
    "    captionfile.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "for i in range(1,205):\n",
    "    subdir = 'dir_'+str(i).zfill(3)\n",
    "    filenames = []\n",
    "    for f in glob.glob('data/test2014/'+subdir+'/*'):\n",
    "        filenames.append(f)\n",
    "    makecaptions(subdir, filenames)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Loading model from checkpoint: ./model.ckpt-2000000\n",
      "INFO:tensorflow:Restoring parameters from ./model.ckpt-2000000\n",
      "INFO:tensorflow:Successfully loaded checkpoint: model.ckpt-2000000\n",
      "COCO_val2014_000000040341.jpg\n",
      "0.00176722 a man standing in the snow holding a snowboard .\n",
      "0.00139279 a man standing in the snow with a snowboard .\n",
      "0.00071641 a man is standing in the snow with a snowboard .\n"
     ]
    }
   ],
   "source": [
    "with tf.Session(graph=g) as sess:\n",
    "        restore_fn(sess)\n",
    "        generator = caption_generator.CaptionGenerator(model, vocab)\n",
    "\n",
    "        try:\n",
    "                filename = 'data/val2014/dir_015/COCO_val2014_000000040341.jpg'\n",
    "                with tf.gfile.GFile(filename, \"rb\") as f:\n",
    "                    image = f.read()\n",
    "                captions = generator.beam_search(sess, image)\n",
    "        \n",
    "                print(os.path.basename(filename))\n",
    "    \n",
    "                for i, caption in enumerate(captions):\n",
    "                    sentence = [vocab.id_to_word(w) for w in caption.sentence[1:-1]]\n",
    "                    sentence = \" \".join(sentence)\n",
    "                    print('{:.8f}'.format(math.exp(caption.logprob)), sentence)\n",
    "        except:\n",
    "                print(filename,'PASS')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
